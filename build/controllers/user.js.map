{"version":3,"sources":["../../src/controllers/user.js"],"names":["exports","list","req","res","params","query","page","parseInt","perPage","per_page","apiQuery","select","then","json","users","catch","error","err","status","send","errors","get","findById","userId","user","password","undefined","recoveryCode","put","data","body","email","isEmail","username","isAlphanumeric","findByIdAndUpdate","_id","new","sendStatus","post","Object","assign","sub","create","delete","active"],"mappings":"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","file":"user.js","sourcesContent":["import async from 'async';\nimport validator from 'validator';\n\nimport User from '../models/user';\nimport Follow from '../models/follow';\n\nimport logger from '../utils/logger';\n\nexports.list = (req, res) => {\n\tconst params = req.params || {};\n\tconst query = req.query || {};\n\n\tconst page = parseInt(query.page, 10) || 0;\n\tconst perPage = parseInt(query.per_page, 10) || 10;\n\n\tUser.apiQuery(req.query)\n\t\t.select('name email username bio url twitter background')\n\t\t.then(users => {\n\t\t\tres.json(users);\n\t\t})\n\t\t.catch(err => {\n\t\t\tlogger.error(err);\n\t\t\tres.status(422).send(err.errors);\n\t\t});\n};\n\nexports.get = (req, res) => {\n\tUser.findById(req.params.userId)\n\t\t.then(user => {\n\t\t\tuser.password = undefined;\n\t\t\tuser.recoveryCode = undefined;\n\n\t\t\tres.json(user);\n\t\t})\n\t\t.catch(err => {\n\t\t\tlogger.error(err);\n\t\t\tres.status(422).send(err.errors);\n\t\t});\n};\n\nexports.put = (req, res) => {\n\tconst data = req.body || {};\n\n\tif (data.email && !validator.isEmail(data.email)) {\n\t\treturn res.status(422).send('Invalid email address.');\n\t}\n\n\tif (data.username && !validator.isAlphanumeric(data.username)) {\n\t\treturn res.status(422).send('Usernames must be alphanumeric.');\n\t}\n\n\tUser.findByIdAndUpdate({ _id: req.params.userId }, data, { new: true })\n\t\t.then(user => {\n\t\t\tif (!user) {\n\t\t\t\treturn res.sendStatus(404);\n\t\t\t}\n\n\t\t\tuser.password = undefined;\n\t\t\tuser.recoveryCode = undefined;\n\n\t\t\tres.json(user);\n\t\t})\n\t\t.catch(err => {\n\t\t\tlogger.error(err);\n\t\t\tres.status(422).send(err.errors);\n\t\t});\n};\n\nexports.post = (req, res) => {\n\tconst data = Object.assign({}, req.body, { user: req.user.sub }) || {};\n\n\tUser.create(data)\n\t\t.then(user => {\n\t\t\tres.json(user);\n\t\t})\n\t\t.catch(err => {\n\t\t\tlogger.error(err);\n\t\t\tres.status(500).send(err);\n\t\t});\n};\n\nexports.delete = (req, res) => {\n\tUser.findByIdAndUpdate(\n\t\t{ _id: req.params.user },\n\t\t{ active: false },\n\t\t{\n\t\t\tnew: true\n\t\t}\n\t)\n\t\t.then(user => {\n\t\t\tif (!user) {\n\t\t\t\treturn res.sendStatus(404);\n\t\t\t}\n\n\t\t\tres.sendStatus(204);\n\t\t})\n\t\t.catch(err => {\n\t\t\tlogger.error(err);\n\t\t\tres.status(422).send(err.errors);\n\t\t});\n};\n"]}