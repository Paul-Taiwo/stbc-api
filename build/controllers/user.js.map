{"version":3,"sources":["../../src/controllers/user.js"],"names":["exports","list","req","res","params","query","page","parseInt","perPage","per_page","User","apiQuery","select","then","json","users","catch","logger","error","err","status","send","errors","get","findById","userId","user","password","undefined","recoveryCode","put","data","body","email","validator","isEmail","username","isAlphanumeric","findByIdAndUpdate","_id","new","sendStatus","post","Object","assign","sub","create","delete","active"],"mappings":"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","file":"user.js","sourcesContent":["import async from 'async';\nimport validator from 'validator';\n\nimport User from '../models/user';\n\nimport logger from '../utils/logger';\n\nexports.list = (req, res) => {\n\tconst params = req.params || {};\n\tconst query = req.query || {};\n\n\tconst page = parseInt(query.page, 10) || 0;\n\tconst perPage = parseInt(query.per_page, 10) || 10;\n\n\tUser.apiQuery(req.query)\n\t\t.select('name email username bio url twitter background')\n\t\t.then(users => {\n\t\t\tres.json(users);\n\t\t})\n\t\t.catch(err => {\n\t\t\tlogger.error(err);\n\t\t\tres.status(422).send(err.errors);\n\t\t});\n};\n\nexports.get = (req, res) => {\n\tUser.findById(req.params.userId)\n\t\t.then(user => {\n\t\t\tuser.password = undefined;\n\t\t\tuser.recoveryCode = undefined;\n\n\t\t\tres.json(user);\n\t\t})\n\t\t.catch(err => {\n\t\t\tlogger.error(err);\n\t\t\tres.status(422).send(err.errors);\n\t\t});\n};\n\nexports.put = (req, res) => {\n\tconst data = req.body || {};\n\n\tif (data.email && !validator.isEmail(data.email)) {\n\t\treturn res.status(422).send('Invalid email address.');\n\t}\n\n\tif (data.username && !validator.isAlphanumeric(data.username)) {\n\t\treturn res.status(422).send('Usernames must be alphanumeric.');\n\t}\n\n\tUser.findByIdAndUpdate({ _id: req.params.userId }, data, { new: true })\n\t\t.then(user => {\n\t\t\tif (!user) {\n\t\t\t\treturn res.sendStatus(404);\n\t\t\t}\n\n\t\t\tuser.password = undefined;\n\t\t\tuser.recoveryCode = undefined;\n\n\t\t\tres.json(user);\n\t\t})\n\t\t.catch(err => {\n\t\t\tlogger.error(err);\n\t\t\tres.status(422).send(err.errors);\n\t\t});\n};\n\nexports.post = (req, res) => {\n\tconst data = Object.assign({}, req.body, { user: req.user.sub }) || {};\n\n\tUser.create(data)\n\t\t.then(user => {\n\t\t\tres.json(user);\n\t\t})\n\t\t.catch(err => {\n\t\t\tlogger.error(err);\n\t\t\tres.status(500).send(err);\n\t\t});\n};\n\nexports.delete = (req, res) => {\n\tUser.findByIdAndUpdate(\n\t\t{ _id: req.params.user },\n\t\t{ active: false },\n\t\t{\n\t\t\tnew: true\n\t\t}\n\t)\n\t\t.then(user => {\n\t\t\tif (!user) {\n\t\t\t\treturn res.sendStatus(404);\n\t\t\t}\n\n\t\t\tres.sendStatus(204);\n\t\t})\n\t\t.catch(err => {\n\t\t\tlogger.error(err);\n\t\t\tres.status(422).send(err.errors);\n\t\t});\n};\n"]}