{"version":3,"sources":["../../src/controllers/blog.js"],"names":["exports","list","req","res","params","query","page","parseInt","perPage","per_page","BlogModel","apiQuery","select","then","blogs","status","json","data","catch","err","logger","error","send","errors","get","findById","postId","exec","blogPost","post","Object","assign","body","cloudinary","uploader","upload","featured_img","folder","result","url","create","blog"],"mappings":";;AAAA;;;;AACA;;;;AAEA;;AAEA;;;;;;AAEAA,QAAQC,IAAR,GAAe,UAACC,GAAD,EAAMC,GAAN,EAAc;AAC3B,MAAMC,SAASF,IAAIE,MAAJ,IAAc,EAA7B;AACA,MAAMC,QAAQH,IAAIG,KAAJ,IAAa,EAA3B;;AAEA,MAAMC,OAAOC,SAASF,MAAMC,IAAf,EAAqB,EAArB,KAA4B,CAAzC;AACA,MAAME,UAAUD,SAASF,MAAMI,QAAf,EAAyB,EAAzB,KAAgC,EAAhD;;AAEAC,oBAAUC,QAAV,CAAmBT,IAAIG,KAAvB,EACGO,MADH,CACU,0EADV,EAEGC,IAFH,CAEQ,UAACC,KAAD,EAAW;AACfX,QAAIY,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACnBD,cAAQ,GADW;AAEnBE,YAAMH;AAFa,KAArB;AAID,GAPH,EAQGI,KARH,CAQS,UAACC,GAAD,EAAS;AACdC,qBAAOC,KAAP,CAAaF,GAAb;AACAhB,QAAIY,MAAJ,CAAW,GAAX,EAAgBO,IAAhB,CAAqBH,IAAII,MAAzB;AACD,GAXH;AAYD,CAnBD;;AAqBAvB,QAAQwB,GAAR,GAAc,UAACtB,GAAD,EAAMC,GAAN,EAAc;AAC1BO,oBAAUe,QAAV,CAAmBvB,IAAIE,MAAJ,CAAWsB,MAA9B,EACGC,IADH,GAEGd,IAFH,CAEQ,UAACe,QAAD,EAAc;AAClBzB,QAAIY,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACnBD,cAAQ,GADW;AAEnBE,YAAMW;AAFa,KAArB;AAID,GAPH,EAQGV,KARH,CAQS,UAACC,GAAD,EAAS;AACdC,qBAAOC,KAAP,CAAaF,GAAb;AACAhB,QAAIY,MAAJ,CAAW,GAAX,EAAgBO,IAAhB,CAAqBH,IAAII,MAAzB;AACD,GAXH;AAYD,CAbD;;AAeA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEAvB,QAAQ6B,IAAR,GAAe,UAAC3B,GAAD,EAAMC,GAAN,EAAc;AAC3B,MAAMc,OAAOa,OAAOC,MAAP,CAAc,EAAd,EAAkB7B,IAAI8B,IAAtB,KAA+B,EAA5C;;AAEAC,uBAAWC,QAAX,CAAoBC,MAApB,CACElB,KAAKmB,YADP,EAEE,EAAEC,QAAQ,WAAV,EAFF,EAGE,UAAChB,KAAD,EAAQiB,MAAR,EAAmB;AACjB,QAAIjB,KAAJ,EAAW;AACT,aAAOlB,IAAIY,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAC1BK,eAAOA;AADmB,OAArB,CAAP;AAGD;;AAED,QAAIiB,MAAJ,EAAY;AACV;AACArB,WAAKmB,YAAL,GAAoBE,OAAOC,GAA3B;;AAEA7B,wBAAU8B,MAAV,CAAiBvB,IAAjB,EACGJ,IADH,CACQ,UAAC4B,IAAD,EAAU;AACdtC,YAAIY,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqByB,IAArB;AACD,OAHH,EAIGvB,KAJH,CAIS,UAACC,GAAD,EAAS;AACdC,yBAAOC,KAAP,CAAaF,GAAb;AACAhB,YAAIY,MAAJ,CAAW,GAAX,EAAgBO,IAAhB,CAAqBH,GAArB;AACD,OAPH;AAQD;AACF,GAvBH;AAyBD,CA5BD;;AA8BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA","file":"blog.js","sourcesContent":["import async from \"async\";\nimport cloudinary from \"../utils/cloudinary\";\n\nimport { BlogModel } from \"../models\";\n\nimport logger from \"../utils/logger\";\n\nexports.list = (req, res) => {\n  const params = req.params || {};\n  const query = req.query || {};\n\n  const page = parseInt(query.page, 10) || 0;\n  const perPage = parseInt(query.per_page, 10) || 10;\n\n  BlogModel.apiQuery(req.query)\n    .select(\"blog_title blog_author blog_content blog_comments featured_img createdAt\")\n    .then((blogs) => {\n      res.status(200).json({\n        status: 200,\n        data: blogs,\n      });\n    })\n    .catch((err) => {\n      logger.error(err);\n      res.status(422).send(err.errors);\n    });\n};\n\nexports.get = (req, res) => {\n  BlogModel.findById(req.params.postId)\n    .exec()\n    .then((blogPost) => {\n      res.status(200).json({\n        status: 200,\n        data: blogPost,\n      });\n    })\n    .catch((err) => {\n      logger.error(err);\n      res.status(422).send(err.errors);\n    });\n};\n\n// exports.put = (req, res) => {\n//   const data = req.body || {};\n\n//   if (data.email && !validator.isEmail(data.email)) {\n//     return res.status(422).send(\"Invalid email address.\");\n//   }\n\n//   if (data.username && !validator.isAlphanumeric(data.username)) {\n//     return res.status(422).send(\"BlogModelnames must be alphanumeric.\");\n//   }\n\n//   BlogModel.findByIdAndUpdate({ _id: req.params.userId }, data, { new: true })\n//     .then((user) => {\n//       if (!user) {\n//         return res.sendStatus(404);\n//       }\n\n//       user.password = undefined;\n//       user.recoveryCode = undefined;\n\n//       res.json(user);\n//     })\n//     .catch((err) => {\n//       logger.error(err);\n//       res.status(422).send(err.errors);\n//     });\n// };\n\nexports.post = (req, res) => {\n  const data = Object.assign({}, req.body) || {};\n\n  cloudinary.uploader.upload(\n    data.featured_img,\n    { folder: \"blog-post\" },\n    (error, result) => {\n      if (error) {\n        return res.status(500).json({\n          error: error,\n        });\n      }\n\n      if (result) {\n        // data.featured_img = result.secure_url;\n        data.featured_img = result.url;\n\n        BlogModel.create(data)\n          .then((blog) => {\n            res.status(200).json(blog);\n          })\n          .catch((err) => {\n            logger.error(err);\n            res.status(500).send(err);\n          });\n      }\n    }\n  );\n};\n\n// exports.delete = (req, res) => {\n//   BlogModel.findByIdAndUpdate(\n//     { _id: req.params.user },\n//     { active: false },\n//     {\n//       new: true,\n//     }\n//   )\n//     .then((user) => {\n//       if (!user) {\n//         return res.sendStatus(404);\n//       }\n\n//       res.sendStatus(204);\n//     })\n//     .catch((err) => {\n//       logger.error(err);\n//       res.status(422).send(err.errors);\n//     });\n// };\n"]}