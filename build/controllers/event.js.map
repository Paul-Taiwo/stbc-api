{"version":3,"sources":["../../src/controllers/event.js"],"names":["exports","list","req","res","params","query","page","parseInt","perPage","per_page","EventModel","apiQuery","select","then","events","status","json","catch","err","logger","error","send","errors","get","findById","eventId","event","post","data","Object","assign","body","create"],"mappings":";;AAAA;;;;AAEA;;AAEA;;;;;;AAEAA,QAAQC,IAAR,GAAe,UAACC,GAAD,EAAMC,GAAN,EAAc;AAC3B,MAAMC,SAASF,IAAIE,MAAJ,IAAc,EAA7B;AACA,MAAMC,QAAQH,IAAIG,KAAJ,IAAa,EAA3B;;AAEA,MAAMC,OAAOC,SAASF,MAAMC,IAAf,EAAqB,EAArB,KAA4B,CAAzC;AACA,MAAME,UAAUD,SAASF,MAAMI,QAAf,EAAyB,EAAzB,KAAgC,EAAhD;AACAC,qBAAWC,QAAX,CAAoBT,IAAIG,KAAxB,EACGO,MADH,CACU,2CADV,EAEGC,IAFH,CAEQ,UAACC,MAAD,EAAY;AAChBX,QAAIY,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqBF,MAArB;AACD,GAJH,EAKGG,KALH,CAKS,UAACC,GAAD,EAAS;AACdC,qBAAOC,KAAP,CAAaF,GAAb;AACAf,QAAIY,MAAJ,CAAW,GAAX,EAAgBM,IAAhB,CAAqBH,IAAII,MAAzB;AACD,GARH;AASD,CAfD;;AAiBAtB,QAAQuB,GAAR,GAAc,UAACrB,GAAD,EAAMC,GAAN,EAAc;AAC1BO,qBAAWc,QAAX,CAAoBtB,IAAIE,MAAJ,CAAWqB,OAA/B,EACGZ,IADH,CACQ,UAACa,KAAD,EAAW;AACfvB,QAAIY,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqBU,KAArB;AACD,GAHH,EAIGT,KAJH,CAIS,UAACC,GAAD,EAAS;AACdC,qBAAOC,KAAP,CAAaF,GAAb;AACAf,QAAIY,MAAJ,CAAW,GAAX,EAAgBM,IAAhB,CAAqBH,IAAII,MAAzB;AACD,GAPH;AAQD,CATD;;AAWA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEAtB,QAAQ2B,IAAR,GAAe,UAACzB,GAAD,EAAMC,GAAN,EAAc;AAC3B,MAAMyB,OAAOC,OAAOC,MAAP,CAAc,EAAd,EAAkB5B,IAAI6B,IAAtB,KAA+B,EAA5C;;AAEArB,qBAAWsB,MAAX,CAAkBJ,IAAlB,EACGf,IADH,CACQ,UAACa,KAAD,EAAW;AACfvB,QAAIY,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqBU,KAArB;AACD,GAHH,EAIGT,KAJH,CAIS,UAACC,GAAD,EAAS;AACdC,qBAAOC,KAAP,CAAaF,GAAb;AACAf,QAAIY,MAAJ,CAAW,GAAX,EAAgBM,IAAhB,CAAqBH,GAArB;AACD,GAPH;AAQD,CAXD;;AAaA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA","file":"event.js","sourcesContent":["import async from \"async\";\n\nimport { EventModel } from \"../models\";\n\nimport logger from \"../utils/logger\";\n\nexports.list = (req, res) => {\n  const params = req.params || {};\n  const query = req.query || {};\n\n  const page = parseInt(query.page, 10) || 0;\n  const perPage = parseInt(query.per_page, 10) || 10;\n  EventModel.apiQuery(req.query)\n    .select(\"event_title name event_date event_content\")\n    .then((events) => {\n      res.status(200).json(events);\n    })\n    .catch((err) => {\n      logger.error(err);\n      res.status(422).send(err.errors);\n    });\n};\n\nexports.get = (req, res) => {\n  EventModel.findById(req.params.eventId)\n    .then((event) => {\n      res.status(200).json(event);\n    })\n    .catch((err) => {\n      logger.error(err);\n      res.status(422).send(err.errors);\n    });\n};\n\n// exports.put = (req, res) => {\n//   const data = req.body || {};\n\n//   if (data.email && !validator.isEmail(data.email)) {\n//     return res.status(422).send(\"Invalid email address.\");\n//   }\n\n//   if (data.username && !validator.isAlphanumeric(data.username)) {\n//     return res.status(422).send(\"EventModelnames must be alphanumeric.\");\n//   }\n\n//   EventModel.findByIdAndUpdate({ _id: req.params.userId }, data, { new: true })\n//     .then((user) => {\n//       if (!user) {\n//         return res.sendStatus(404);\n//       }\n\n//       user.password = undefined;\n//       user.recoveryCode = undefined;\n\n//       res.json(user);\n//     })\n//     .catch((err) => {\n//       logger.error(err);\n//       res.status(422).send(err.errors);\n//     });\n// };\n\nexports.post = (req, res) => {\n  const data = Object.assign({}, req.body) || {};\n\n  EventModel.create(data)\n    .then((event) => {\n      res.status(200).json(event);\n    })\n    .catch((err) => {\n      logger.error(err);\n      res.status(500).send(err);\n    });\n};\n\n// exports.delete = (req, res) => {\n//   EventModel.findByIdAndUpdate(\n//     { _id: req.params.user },\n//     { active: false },\n//     {\n//       new: true,\n//     }\n//   )\n//     .then((user) => {\n//       if (!user) {\n//         return res.sendStatus(404);\n//       }\n\n//       res.sendStatus(204);\n//     })\n//     .catch((err) => {\n//       logger.error(err);\n//       res.status(422).send(err.errors);\n//     });\n// };\n"]}